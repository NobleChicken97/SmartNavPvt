# Agentic AI Prompt — Build “Smart Navigator” (Thapar, Patiala) with future 3D GLB overlay



Project overview
- Name: Smart Navigator – Thapar Institute (Patiala, Punjab)
- Goal: A modern campus navigation and event finder web app using Google Maps as the 2D base today, with an architecture ready to enable a Three.js GLB overlay via Google Maps WebGLOverlayView later.
- Campus center: lat 30.3564, lng 76.3625 (use as default center and for presets).
- Deliver a complete, deployable app with best practices (2025 standards): security, performance, DX, and clean separation of map layers vs future 3D overlay.

Tech stack
- Frontend: React 18 + Vite, TypeScript, Tailwind CSS, React Router, Axios, Zustand or Context for state.
- Maps: Google Maps JavaScript API (vector basemap with tilt/rotation) + WebGLOverlayView ready; plan for @googlemaps/three or ThreeJSOverlayView helper; GLTFLoader (deferred).
- Backend: Node.js (18+), Express, MongoDB (Mongoose).
- Auth: JWT with HTTP-only cookies, bcrypt, role-based access (student|admin).
- Tooling: ESLint, Prettier, Husky (pre-commit), dotenv, CORS, cookie-parser, zod or express-validator.
- Build/deploy: Dockerfile(s), docker-compose for local, minimal CI workflow (lint/test/build).

Repository structure
smart-navigator/
  frontend/  (React+Vite+TS+Tailwind)
  backend/   (Express+Mongoose)
  scripts/   (seed, migrate, utilities)
  .env.example (root + frontend + backend variants)
  docker-compose.yml
  README.md

Backend requirements
- Models (Mongoose)
  - User: name, email(unique), password(hash), interests: string[], role: enum('student','admin'), timestamps.
  - Location: name, description, type: enum('building','room','poi'), coordinates {lat:Number, lng:Number}, buildingId?: ObjectId, floor?: number|string, tags: string[], meta?: Mixed, timestamps. Create 2dsphere index on coordinates.
  - Event: title, description, category, locationId(ref Location), dateTime, capacity, attendees: [{userId, registeredAt}], tags: string[], organizer, timestamps.
- Auth
  - Endpoints: POST /api/auth/register, POST /api/auth/login, POST /api/auth/logout, GET /api/auth/me.
  - JWT in HTTP-only, secure cookies; short access token lifetime; SameSite=Lax (or Strict if feasible); CSRF token for state-changing routes (send as header).
- API endpoints
  - Locations: GET /api/locations (filters: q, type, bbox), GET /api/locations/:id, POST/PUT/DELETE (admin). Support bbox query for map bounds and lightweight list payload for overlays.
  - Events: GET /api/events (filters: q, category, date range, locationId), GET /api/events/:id, POST/PUT/DELETE (admin).
  - Recommendations: GET /api/events/recommended — simple content-based match using user.interests vs event.tags, sort by freshness.
  - Users: GET /api/users/profile, PUT /api/users/profile (update interests).
- Middleware and security
  - Validation with zod or express-validator per route.
  - Rate-limit auth and write routes.
  - Helmet + security headers (CSP: nonce-based for scripts; HSTS; Referrer-Policy; Permissions-Policy minimal).
  - Error handling middleware with consistent JSON envelopes.
  - CORS configured to allow the frontend origin with credentials.

Frontend requirements
- Vite + React + TypeScript + Tailwind (configured)
- Pages
  - MapPage (default): Google Map centered at Thapar (30.3564, 76.3625), zoom≈17–18, pitch≈60–67°, bearing≈20–30°; vector mapId; layer toggles; search; directions panel.
  - Auth: Login, Register.
  - AdminDashboard: CRUD for Locations and Events, CSV import for bulk locations (columns: name,type,lat,lng,tags).
  - Profile: update interests.
- Components (maps)
  - GoogleMapContainer: loads Google Maps JS API (via @googlemaps/js-api-loader), initializes vector map with tilt/rotation.
  - MapControls: layer toggles (Locations, Events), search, camera presets (Main Gate, Library, Sports Complex), “Enable 3D overlay” toggle (disabled unless modelUrl provided).
  - DirectionsPanel: origin/destination inputs (search or click), polyline rendering; debounced.
  - LocationsLayer: marker cluster for POIs/buildings; on-click info window with actions.
  - EventsLayer: markers with category filters; list panel with details.
  - Three overlay module (stub): useThreeOverlay hook or MapOverlay service that wires WebGLOverlayView lifecycle but does nothing until modelUrl is set.
- State
  - Global: auth user, UI flags (which layers enabled, is3DEnabled), map camera presets.
  - Map: lightweight lists for markers; fetch details on demand to reduce payloads.
- 3D integration hooks (build now, disabled by default)
  - src/components/Map/overlayConfig.ts:
      export const overlayConfig = {
        modelUrl: "", // empty now
        anchor: { lat: 30.3564, lng: 76.3625, altitude: 100 },
        scale: 1,
        rotation: { x: 0, y: 0, z: 0 },
        headingOffset: 0
      };
  - src/components/Map/useThreeOverlay.ts:
    - Export enable3D(map, config) and disable3D().
    - Implement WebGLOverlayView lifecycle stubs: onAdd (init Three scene, lights), onContextRestored (create renderer from map GL context), onDraw (sync camera matrices, render if model loaded), onRemove/ onContextLost.
    - If config.modelUrl is empty, do not load GLTF; overlay remains inert.
    - Leave TODO: “plug GLTFLoader when modelUrl provided.”
  - UI: “Enable 3D overlay” toggle is disabled if overlayConfig.modelUrl === "".
- Performance and UX
  - Code-split heavy routes (AdminDashboard, MapPage secondary panels).
  - Debounce search and bounds queries; memoize marker rendering.
  - Prefer canvas/WebGL overlays over many DOM markers; use marker clustering.
  - Core Web Vitals focus (INP, LCP, CLS): lazy-load non-critical code; use HTTP/2 or HTTP/3, Brotli compression.
- Accessibility
  - Keyboard accessible controls; aria labels; sufficient contrast; focus management for panels.

Seed and presets
- Seed script adds a few demo Locations and Events around 30.3564, 76.3625 (offsets ±0.0005–0.001).
- Camera preset examples:
  - Main Gate: { lat: 30.3568, lng: 76.3619, zoom: 18, tilt: 65, heading: 25 }
  - Library:  { lat: 30.3573, lng: 76.3631, zoom: 18, tilt: 65, heading: 20 }
  - Sports:   { lat: 30.3549, lng: 76.3615, zoom: 17.5, tilt: 60, heading: 30 }

Quality, security, and DX
- TypeScript across frontend; JSDoc/TS in backend (or full TS if time permits).
- ESLint + Prettier; Husky pre-commit to run lint and type-check.
- Env templates:
  - backend/.env.example: MONGODB_URI, JWT_SECRET, COOKIE_NAME, NODE_ENV, CORS_ORIGIN
  - frontend/.env.example: VITE_GOOGLE_MAPS_API_KEY, VITE_API_BASE_URL, VITE_MAP_ID
- Docker:
  - Dockerfile for frontend and backend.
  - docker-compose.yml for local dev with MongoDB and both services.
- CI (minimal):
  - Node 18/20 matrix; install, lint, type-check, run backend tests (if any), build frontend.

Acceptance criteria
- App runs locally with docker-compose up (or separate dev scripts).
- A user can register, log in, view the map centered on Thapar, search locations, toggle layers, view events, get directions, and manage profile interests.
- Admin can CRUD Locations and Events and import locations via CSV.
- “Enable 3D overlay” toggle exists, is disabled by default, and enabling it requires setting overlayConfig.modelUrl; once provided later, the overlay code loads without refactor.
- Backend validates inputs, enforces roles, rate-limits auth, sets security headers, and returns clear JSON errors.
- Frontend is responsive, accessible, and passes basic Core Web Vitals in dev.

Scaffolding tasks for the agent (execute in order)
1) Initialize repo with the described structure, TS React frontend with Tailwind, and Express backend with Mongoose. Add ESLint/Prettier/Husky, Dockerfiles, docker-compose, and .env.example files.
2) Implement backend models, auth (JWT cookies), validation, security headers, rate limiting, and all endpoints for Locations/Events/Users as specified.
3) Build frontend auth pages, protected routes, API client, and state management (Zustand or Context).
4) Implement MapPage with Google Maps loader, vector map with tilt/rotation, markers/clusters, info windows, search, directions panel, layer toggles, and camera presets.
5) Add the three overlay module (useThreeOverlay) with WebGLOverlayView lifecycle stubs, overlayConfig defaults, and a disabled “Enable 3D overlay” toggle.
6) Create AdminDashboard with CRUD UIs and CSV import for locations.
7) Add recommendation endpoint and UI section for recommended events.
8) Provide seed scripts and README with setup instructions (Google Maps API key, Map ID creation for vector map, running dev and prod, how to later add modelUrl to enable 3D).

Notes for future 3D integration
- When a GLB is ready, set overlayConfig.modelUrl and implement GLTFLoader inside useThreeOverlay.onAdd; position via transformer.fromLatLngAltitude(anchor) and adjust scale/rotation/headingOffset to align.
- Prepare models with meters, Y-up, Draco compression, texture atlases, and LODs if splitting per building.

Build now. The result must be a modern, secure, performant MERN web app with Google Maps-based navigation for Thapar campus that can accept a GLB 3D overlay later via a feature flag, without refactoring.