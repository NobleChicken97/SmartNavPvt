name: CI Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./smart-navigator/frontend
    
    strategy:
      matrix:
        node-version: [20.x]  # Simplified to single Node version
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: './smart-navigator/frontend/package-lock.json'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run type check
      run: npm run type-check
      
    - name: Run tests
      run: npm test
      
    - name: Build application
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build-${{ matrix.node-version }}
        path: ./smart-navigator/frontend/dist
        retention-days: 7

  test-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./smart-navigator/backend
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    services:
      mongodb:
        image: mongo:6
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: example
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: './smart-navigator/backend/package-lock.json'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linter
      run: npm run lint
      
    - name: Run tests
      run: npm test
      env:
        MONGODB_URI: mongodb://root:example@localhost:27017/smart-navigator-test?authSource=admin
        JWT_SECRET: test-secret-key
        NODE_ENV: test

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

  dependency-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        
    - name: Audit frontend dependencies
      run: |
        cd smart-navigator/frontend
        npm audit --audit-level=high || echo "Some vulnerabilities found but continuing"
      continue-on-error: true
        
    - name: Audit backend dependencies
      run: |
        cd smart-navigator/backend
        npm audit --audit-level=high || echo "Some vulnerabilities found but continuing"
      continue-on-error: true

  docker-build:
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    if: always() && (needs.test-frontend.result == 'success' || needs.test-backend.result == 'success')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./smart-navigator/frontend
        push: false
        tags: smart-navigator-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
      continue-on-error: true
        
    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./smart-navigator/backend
        push: false
        tags: smart-navigator-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
      continue-on-error: true
        
    - name: Test Docker Compose
      run: |
        cd smart-navigator
        docker-compose -f docker-compose.yml config
      continue-on-error: true
