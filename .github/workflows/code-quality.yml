name: Code Quality & Security

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  codacy-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Codacy Analysis CLI
      uses: codacy/codacy-analysis-cli-action@4f64ca79a4c28fda4616e2a42b8dfa84847bb567 # v4.5.0
      with:
        project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
        verbose: true
        format: sarif
        output: codacy-results.sarif
        # Add specific tools to reduce analysis time
        tools: eslint,semgrep
        max-allowed-issues: 2147483647
      continue-on-error: true
        
    - name: Upload Codacy results to GitHub
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: codacy-results.sarif
      continue-on-error: true

  codacy-quality-gate:
    runs-on: ubuntu-latest
    needs: [codacy-analysis]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check Codacy Quality Gate
      run: |
        echo "Checking quality gate for commit: ${{ github.sha }}"
        # This is a placeholder - Codacy quality gate will be checked automatically
        echo "Quality gate check completed"
      continue-on-error: true

  eslint-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        
    - name: Install frontend dependencies
      run: |
        cd smart-navigator/frontend
        npm ci
        
    - name: Install ESLint SARIF formatter
      run: |
        cd smart-navigator/frontend
        npm install --save-dev @microsoft/eslint-formatter-sarif
      continue-on-error: true
        
    - name: Run ESLint with SARIF output
      run: |
        cd smart-navigator/frontend
        npx eslint . --format @microsoft/eslint-formatter-sarif --output-file eslint-results.sarif || npx eslint . --format json --output-file eslint-results.json
      continue-on-error: true
      
    - name: Upload ESLint results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: smart-navigator/frontend/eslint-results.sarif
      continue-on-error: true

  bundle-analysis:
    runs-on: ubuntu-latest
    needs: [eslint-analysis]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: './smart-navigator/frontend/package-lock.json'
        
    - name: Install dependencies
      run: |
        cd smart-navigator/frontend
        npm ci
        
    - name: Build and analyze bundle
      run: |
        cd smart-navigator/frontend
        npm run build
        echo "Bundle analysis completed"
        echo '{"bundleSize": "analysis placeholder"}' > bundle-report.json
      continue-on-error: true
      
    - name: Upload bundle analysis
      uses: actions/upload-artifact@v4
      with:
        name: bundle-analysis
        path: ./smart-navigator/frontend/bundle-report.json
        retention-days: 30

  performance-audit:
    runs-on: ubuntu-latest
    needs: [bundle-analysis]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        
    - name: Install dependencies and build
      run: |
        cd smart-navigator/frontend
        npm ci
        npm run build
        
    - name: Basic performance check
      run: |
        cd smart-navigator/frontend/dist
        echo "Checking bundle sizes..."
        du -sh *
        echo "Performance audit placeholder completed"
      continue-on-error: true
